#!/usr/bin/env python3
"""
CLI orchestrator for M1.5 digest processing, video rendering, and notifications.
"""

import click
import subprocess
import sys
import json
from pathlib import Path
import logging

# Add parent directory to Python path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@click.command()
@click.option("--date", required=True, help="Date in YYYY-MM-DD format")
@click.option("--normalize/--no-normalize", default=True, help="Normalize digest data")
@click.option("--render/--no-render", default=True, help="Render videos from story packets")
@click.option("--notify-discord/--no-notify-discord", default=True, help="Send Discord notifications")
@click.option("--write-blog/--no-write-blog", default=True, help="Generate blog markdown")
@click.option("--verbose", "-v", is_flag=True, help="Verbose output")
def main(date, normalize, render, notify_discord, write_blog, verbose):
    """Process digest data for M1.5 pipeline."""
    
    if verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # Validate date format
    try:
        from datetime import datetime
        datetime.strptime(date, "%Y-%m-%d")
    except ValueError:
        click.echo("Error: Date must be in YYYY-MM-DD format", err=True)
        sys.exit(1)
    
    # Check if digest exists (look in blogs directory)
    digest_path = Path(f"blogs/{date}/PRE-CLEANED-{date}_digest.json")
    if not digest_path.exists():
        click.echo(f"Error: Digest not found: {digest_path}", err=True)
        sys.exit(1)
    
    click.echo(f"Processing digest for {date}...")
    
    # Step 1: Normalize (already done by existing pipeline)
    if normalize:
        click.echo("âœ“ Normalize: Digest already normalized (v2 format)")
    
    # Step 2: Render videos
    if render:
        click.echo("ðŸ”„ Rendering videos...")
        try:
            result = subprocess.run([
                sys.executable, "tools/renderer_stub.py", date
            ], capture_output=True, text=True, check=True)
            click.echo("âœ“ Render: Videos rendered successfully")
            if verbose:
                click.echo(result.stdout)
        except subprocess.CalledProcessError as e:
            click.echo(f"âœ— Render failed: {e.stderr}", err=True)
            if not verbose:
                click.echo("Use --verbose for more details")
            sys.exit(1)
    
    # Step 3: Send Discord notifications
    if notify_discord:
        click.echo("ðŸ”„ Sending Discord notifications...")
        try:
            result = subprocess.run([
                sys.executable, "tools/discord_notifier.py", date
            ], capture_output=True, text=True, check=True)
            click.echo("âœ“ Discord: Notifications sent successfully")
            if verbose:
                click.echo(result.stdout)
        except subprocess.CalledProcessError as e:
            click.echo(f"âœ— Discord notifications failed: {e.stderr}", err=True)
            if not verbose:
                click.echo("Use --verbose for more details")
            # Don't exit on Discord failure - it's not critical
    
    # Step 4: Write blog markdown
    if write_blog:
        click.echo("ðŸ”„ Generating blog markdown...")
        try:
            # Import and use existing BlogDigestBuilder
            from services.blog import BlogDigestBuilder
            
            builder = BlogDigestBuilder()
            
            # Load digest data
            with open(digest_path, 'r') as f:
                data = json.load(f)
            
            # Generate markdown
            md_content = builder.generate_markdown(data)
            
            # Write to drafts directory
            out_path = Path(f"drafts/{date}.md")
            out_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(out_path, 'w') as f:
                f.write(md_content)
            
            click.echo(f"âœ“ Blog: Markdown written to {out_path}")
            
        except Exception as e:
            click.echo(f"âœ— Blog generation failed: {e}", err=True)
            if not verbose:
                click.echo("Use --verbose for more details")
            sys.exit(1)
    
    click.echo(f"âœ… M1.5 pipeline completed for {date}")


if __name__ == "__main__":
    main()
